08000274 t _GLOBAL__sub_I__ZN10__cxxabiv119__terminate_handlerE
080000f0 t _GLOBAL__sub_I__ZNSt3pmr15memory_resourceD2Ev
08000134 t _GLOBAL__sub_I___cxa_get_globals_fast
0800382c T _Unwind_Backtrace
08002e48 t _Unwind_DebugHook
08003808 T _Unwind_ForcedUnwind
08003070 t _Unwind_GetGR
0800379c T _Unwind_RaiseException
080037c0 T _Unwind_Resume
080037e4 T _Unwind_Resume_or_Rethrow
080030bc t _Unwind_SetGR
08003040 T _Unwind_VRS_Get
08003404 T _Unwind_VRS_Pop
0800308c T _Unwind_VRS_Set
08002e3c t _Unwind_decode_typeinfo_ptr.constprop.0
080014a8 T application(resource_list&)
080014e4 T terminate_handler()
08001508 T initialize_platform()
08001454 T foo()
08000210 t __static_initialization_and_destruction_0(int, int)
0800263c T _ZGTtNKSt9exception4whatEv
20000290 b guard variable for initialize_platform()::dwt_steady_clock
08001db0 T __cxxabiv1::__terminate(void (*)())
08001d04 T __cxxabiv1::__class_type_info::~__class_type_info()
08001cf0 T __cxxabiv1::__class_type_info::~__class_type_info()
08001cf0 T __cxxabiv1::__class_type_info::~__class_type_info()
2000010c D __cxxabiv1::__terminate_handler
08000284 W __cxxabiv1::__terminate_handler::'lambda'()::_FUN()
08001e6c T __cxxabiv1::__si_class_type_info::~__si_class_type_info()
08001e58 T __cxxabiv1::__si_class_type_info::~__si_class_type_info()
08001e58 T __cxxabiv1::__si_class_type_info::~__si_class_type_info()
08001fbc T __cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info()
08001fa8 T __cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info()
08001fa8 T __cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info()
200002b0 b (anonymous namespace)::eh_globals
200002bc b (anonymous namespace)::__new_handler
080026cc t (anonymous namespace)::constant_init::~constant_init()
080026cc t (anonymous namespace)::constant_init::~constant_init()
2000016c b ke::(anonymous namespace)::active_exception
20000170 b ke::(anonymous namespace)::exception_buffer
08001138 W ke::parse_header(unsigned char const**)
08000346 T ke::unwind_frame(ke::instructions_t const&, ke::cortex_m_cpu&)
08000bf6 W ke::action_decoder::get_next_catch_type()
08000bce W ke::action_decoder::get_current_type_info_from_filter()
0800121a W ke::enter_function(ke::exception_object&)
0800085a T ke::get_index_entry(unsigned long)
08000ae8 W ke::index_less_than::operator()(unsigned long, ke::index_entry_t const&)
08000f7e W ke::call_site_info ke::parse_call_site<(ke::lsda_encoding)10>(unsigned char const**, unsigned long, unsigned char const*)
08000ff0 W ke::call_site_info ke::parse_call_site<(ke::lsda_encoding)11>(unsigned char const**, unsigned long, unsigned char const*)
0800105e W ke::call_site_info ke::parse_call_site<(ke::lsda_encoding)12>(unsigned char const**, unsigned long, unsigned char const*)
08000ea4 W ke::call_site_info ke::parse_call_site<(ke::lsda_encoding)2>(unsigned char const**, unsigned long, unsigned char const*)
08000f10 W ke::call_site_info ke::parse_call_site<(ke::lsda_encoding)3>(unsigned char const**, unsigned long, unsigned char const*)
080011ac W ke::call_site_info ke::parse_call_site<(ke::lsda_encoding)4>(unsigned char const**, unsigned long, unsigned char const*)
08000c94 W ke::call_site_info ke::parse_call_site<(ke::lsda_encoding)9>(unsigned char const**, unsigned long, unsigned char const*)
08000884 T ke::raise_exception(ke::exception_object&)
080010ce W ke::skip_dwarf_info(unsigned char const**)
080002fc T ke::current_exception()
08000b40 W ke::decoded_uleb128_t<4u> ke::multi_read_uleb128<4u>(unsigned char const*)
08000e82 W unsigned long const* ke::pop_register_range<1u, (ke::pop_lr)1>(unsigned long const*, ke::cortex_m_cpu&)
08000e64 W unsigned long const* ke::pop_register_range<2u, (ke::pop_lr)1>(unsigned long const*, ke::cortex_m_cpu&)
08000e46 W unsigned long const* ke::pop_register_range<3u, (ke::pop_lr)1>(unsigned long const*, ke::cortex_m_cpu&)
08000e28 W unsigned long const* ke::pop_register_range<4u, (ke::pop_lr)1>(unsigned long const*, ke::cortex_m_cpu&)
08000e0a W unsigned long const* ke::pop_register_range<5u, (ke::pop_lr)1>(unsigned long const*, ke::cortex_m_cpu&)
08000dec W unsigned long const* ke::pop_register_range<6u, (ke::pop_lr)1>(unsigned long const*, ke::cortex_m_cpu&)
08000dce W unsigned long const* ke::pop_register_range<7u, (ke::pop_lr)1>(unsigned long const*, ke::cortex_m_cpu&)
08000308 T ke::get_arm_exception_index()
08000b86 W ke::parse_uleb128_call_site(unsigned char const*, unsigned long, unsigned char const*)
0800084e T ke::get_type_info_from_class_type(void const*)
08000ea0 W unsigned int const const* ke::as<unsigned int const>(void const*)
08000bcc W unsigned int const* const* ke::as<unsigned int const*>(void const*)
08000fee W long const* ke::as<long>(void const*)
08000f0e W unsigned long const* ke::as<unsigned long>(void const*)
08000f7c W short const* ke::as<short>(void const*)
08000ea2 W unsigned short const* ke::as<unsigned short>(void const*)
0800105c W long long const* ke::as<long long>(void const*)
080010cc W unsigned long long const* ke::as<unsigned long long>(void const*)
080002fa T ke::get_lu(void*)
08000afc W ke::to_lsda(ke::exception_object&)
080002f8 T ke::get_su16(void*)
08000250 T hal::get_terminate()
0800023c T hal::set_terminate(void (*)())
20000004 D hal::_default_allocator
20000110 D hal::_exception_allocator
08000268 T hal::get_exception_allocator()
0800025c T hal::set_exception_allocator(std::pmr::memory_resource*)
08000286 W hal::single_exception_allocator<256u>::do_allocate(unsigned int, unsigned int)
080002ae W hal::single_exception_allocator<256u>::do_deallocate(void*, unsigned int, unsigned int)
080002d8 W hal::single_exception_allocator<256u>::~single_exception_allocator()
080002c4 W hal::single_exception_allocator<256u>::~single_exception_allocator()
080002c4 W hal::single_exception_allocator<256u>::~single_exception_allocator()
20000134 d hal::stm32f1::(anonymous namespace)::adc_clock_rate
20000120 d hal::stm32f1::(anonymous namespace)::ahb_clock_rate
200002a4 b hal::stm32f1::(anonymous namespace)::pll_clock_rate
200002a8 b hal::stm32f1::(anonymous namespace)::rtc_clock_rate
200002ac b hal::stm32f1::(anonymous namespace)::usb_clock_rate
20000124 d hal::stm32f1::(anonymous namespace)::apb1_clock_rate
20000128 d hal::stm32f1::(anonymous namespace)::apb2_clock_rate
2000012c d hal::stm32f1::(anonymous namespace)::timer_apb1_clock_rate
20000130 d hal::stm32f1::(anonymous namespace)::timer_apb2_clock_rate
080043d0 V hal::stm32f1::rtc_register::backup_domain_reset
080043c8 V hal::stm32f1::rtc_register::low_speed_osc_enable
080043e0 V hal::stm32f1::clock_control::pll_enable
080043d8 V hal::stm32f1::clock_control::external_osc_enable
08001600 T hal::stm32f1::configure_clocks(hal::stm32f1::clock_tree)
08001c7c T hal::stm32f1::maximum_speed_using_internal_oscillator()
20000138 V hal::stm32f1::rcc
2000013c V hal::stm32f1::flash
08001bb0 T hal::stm32f1::frequency(hal::stm32f1::peripheral)
0800159c T hal::cortex_m::dwt_counter::driver_uptime()
080015bc T hal::cortex_m::dwt_counter::driver_frequency()
080015fc T hal::cortex_m::dwt_counter::register_cpu_frequency(float)
080015c0 T hal::cortex_m::dwt_counter::dwt_counter(float)
080015c0 T hal::cortex_m::dwt_counter::dwt_counter(float)
0800157c W hal::cortex_m::dwt_counter::~dwt_counter()
08001568 W hal::cortex_m::dwt_counter::~dwt_counter()
08001568 W hal::cortex_m::dwt_counter::~dwt_counter()
2000011c V hal::cortex_m::dwt
20000118 V hal::cortex_m::core
08001e4c T __gnu_cxx::recursive_init_error::recursive_init_error()
08001e4c T __gnu_cxx::recursive_init_error::recursive_init_error()
08001e30 T __gnu_cxx::recursive_init_error::~recursive_init_error()
08001e1c T __gnu_cxx::recursive_init_error::~recursive_init_error()
08001e1c T __gnu_cxx::recursive_init_error::~recursive_init_error()
08001d80 T __cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const
08001d64 T __cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const
08001cb0 T __cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const
08001d20 T __cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const
08001ce4 T __cxxabiv1::__class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const
08001f48 T __cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const
08001ec4 T __cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const
08001e88 T __cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const
0800248c T __cxxabiv1::__vmi_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const
08002060 T __cxxabiv1::__vmi_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const
08001fd8 T __cxxabiv1::__vmi_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const
080002a4 W hal::single_exception_allocator<256u>::do_is_equal(std::pmr::memory_resource const&) const
080025c8 t std::pmr::(anonymous namespace)::null_res_t::do_is_equal(std::pmr::memory_resource const&) const
080025c8 t std::pmr::(anonymous namespace)::newdel_res_t::do_is_equal(std::pmr::memory_resource const&) const
08002690 T std::bad_alloc::what() const
0800263c T std::exception::what() const
08001f78 T std::type_info::__is_pointer_p() const
08001f78 T std::type_info::__is_function_p() const
08001f7c T std::type_info::__equal(std::type_info const&) const
08001f7c T std::type_info::operator==(std::type_info const&) const
20000148 d std::pmr::(anonymous namespace)::newdel_res
08002620 t std::pmr::(anonymous namespace)::null_res_t::do_allocate(unsigned int, unsigned int)
080025d4 t std::pmr::(anonymous namespace)::null_res_t::do_deallocate(void*, unsigned int, unsigned int)
080025fc t std::pmr::(anonymous namespace)::null_res_t::~null_res_t()
080025d8 t std::pmr::(anonymous namespace)::null_res_t::~null_res_t()
080025d8 t std::pmr::(anonymous namespace)::null_res_t::~null_res_t()
20000140 d std::pmr::(anonymous namespace)::default_res
08002618 t std::pmr::(anonymous namespace)::newdel_res_t::do_allocate(unsigned int, unsigned int)
0800260c t std::pmr::(anonymous namespace)::newdel_res_t::do_deallocate(void*, unsigned int, unsigned int)
080025ec t std::pmr::(anonymous namespace)::newdel_res_t::~newdel_res_t()
080025dc t std::pmr::(anonymous namespace)::newdel_res_t::~newdel_res_t()
080025dc t std::pmr::(anonymous namespace)::newdel_res_t::~newdel_res_t()
080025e4 t std::pmr::(anonymous namespace)::constant_init<std::pmr::(anonymous namespace)::null_res_t>::~constant_init()
080025e4 t std::pmr::(anonymous namespace)::constant_init<std::pmr::(anonymous namespace)::null_res_t>::~constant_init()
080025e0 t std::pmr::(anonymous namespace)::constant_init<std::pmr::(anonymous namespace)::newdel_res_t>::~constant_init()
080025e0 t std::pmr::(anonymous namespace)::constant_init<std::pmr::(anonymous namespace)::newdel_res_t>::~constant_init()
080025e8 t std::pmr::(anonymous namespace)::constant_init<std::atomic<std::pmr::memory_resource*>>::~constant_init()
080025e8 t std::pmr::(anonymous namespace)::constant_init<std::atomic<std::pmr::memory_resource*>>::~constant_init()
20000144 d std::pmr::(anonymous namespace)::null_res
08002628 T std::pmr::memory_resource::~memory_resource()
08002628 T std::pmr::memory_resource::~memory_resource()
080026ac T std::bad_alloc::~bad_alloc()
08002698 T std::bad_alloc::~bad_alloc()
08002698 T std::bad_alloc::~bad_alloc()
08002638 T std::exception::~exception()
08002638 T std::exception::~exception()
08001f74 T std::type_info::~type_info()
08001f74 T std::type_info::~type_info()
080013ee W __gnu_cxx::__normal_iterator<ke::index_entry_t const*, std::span<ke::index_entry_t const, 4294967295u>> std::__upper_bound<__gnu_cxx::__normal_iterator<ke::index_entry_t const*, std::span<ke::index_entry_t const, 4294967295u>>, unsigned long, __gnu_cxx::__ops::_Val_comp_iter<ke::index_less_than>>(__gnu_cxx::__normal_iterator<ke::index_entry_t const*, std::span<ke::index_entry_t const, 4294967295u>>, __gnu_cxx::__normal_iterator<ke::index_entry_t const*, std::span<ke::index_entry_t const, 4294967295u>>, unsigned long const&, __gnu_cxx::__ops::_Val_comp_iter<ke::index_less_than>)
080026d0 T std::get_new_handler()
080000c0 T std::__throw_bad_alloc()
080013e4 W void std::__advance<__gnu_cxx::__normal_iterator<ke::index_entry_t const*, std::span<ke::index_entry_t const, 4294967295u>>, int>(__gnu_cxx::__normal_iterator<ke::index_entry_t const*, std::span<ke::index_entry_t const, 4294967295u>>&, int, std::random_access_iterator_tag)
08001434 W _ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_
08001dc0 T std::terminate()
08004358 V typeinfo for S
0800434c V typeinfo for T
08004390 V typeinfo for V
08004380 V typeinfo for error
08004420 T typeinfo for __cxxabiv1::__class_type_info
080044c4 T typeinfo for __cxxabiv1::__si_class_type_info
0800453c T typeinfo for __cxxabiv1::__vmi_class_type_info
0800447c T typeinfo for __gnu_cxx::recursive_init_error
080045cc t typeinfo for std::pmr::(anonymous namespace)::null_res_t
08004598 t typeinfo for std::pmr::(anonymous namespace)::newdel_res_t
08004590 T typeinfo for std::pmr::memory_resource
0800467c T typeinfo for std::bad_alloc
08004654 T typeinfo for std::exception
0800450c T typeinfo for std::type_info
08004354 V typeinfo name for S
08004348 V typeinfo name for T
0800438c V typeinfo name for V
08004378 V typeinfo name for error
080043fc T typeinfo name for __cxxabiv1::__class_type_info
0800449c T typeinfo name for __cxxabiv1::__si_class_type_info
08004514 T typeinfo name for __cxxabiv1::__vmi_class_type_info
08004458 T typeinfo name for __gnu_cxx::recursive_init_error
080045d8 t typeinfo name for std::pmr::(anonymous namespace)::null_res_t
080045a4 t typeinfo name for std::pmr::(anonymous namespace)::newdel_res_t
08004574 T typeinfo name for std::pmr::memory_resource
0800466c T typeinfo name for std::bad_alloc
08004644 T typeinfo name for std::exception
080044fc T typeinfo name for std::type_info
0800442c T vtable for __cxxabiv1::__class_type_info
080044d0 T vtable for __cxxabiv1::__si_class_type_info
08004548 T vtable for __cxxabiv1::__vmi_class_type_info
08004398 V vtable for hal::steady_clock
08003f14 V vtable for hal::single_exception_allocator<256u>
080043b0 T vtable for hal::cortex_m::dwt_counter
08004488 T vtable for __gnu_cxx::recursive_init_error
08004618 t vtable for std::pmr::(anonymous namespace)::null_res_t
080045fc t vtable for std::pmr::(anonymous namespace)::newdel_res_t
08004688 T vtable for std::bad_alloc
20000294 b initialize_platform()::dwt_steady_clock
08003f38 t ke::unwind_frame(ke::instructions_t const&, ke::cortex_m_cpu&)::jump_table
0800262c T operator delete(void*)
080026c8 T operator delete(void*, std::align_val_t)
08001dac T operator delete(void*, unsigned int)
08002630 T operator delete(void*, unsigned int, std::align_val_t)
08002644 T operator new(unsigned int, std::align_val_t)
080046b4 r __EH_FRAME_BEGIN__
080046dc r __FRAME_END__
20000150 D __TMC_END__
0800382c T ___Unwind_Backtrace
08003808 T ___Unwind_ForcedUnwind
0800379c T ___Unwind_RaiseException
080037c0 T ___Unwind_Resume
080037e4 T ___Unwind_Resume_or_Rethrow
080026ec T __addsf3
08001ca4 T __aeabi_atexit
08002c14 T __aeabi_cfcmpeq
08002c14 T __aeabi_cfcmple
08002c0c T __aeabi_cfrcmple
080026ec T __aeabi_fadd
08002c24 T __aeabi_fcmpeq
08002c60 T __aeabi_fcmpge
08002c74 T __aeabi_fcmpgt
08002c4c T __aeabi_fcmple
08002c38 T __aeabi_fcmplt
08002a64 T __aeabi_fdiv
080028fc T __aeabi_fmul
080026e0 T __aeabi_frsub
080026e8 T __aeabi_fsub
08002854 T __aeabi_i2f
08002880 T __aeabi_l2f
08003b70 T __aeabi_memcpy
08003b70 T __aeabi_memcpy4
08003b70 T __aeabi_memcpy8
0800284c T __aeabi_ui2f
08002870 T __aeabi_ul2f
080033ec T __aeabi_unwind_cpp_pr0
080033f4 W __aeabi_unwind_cpp_pr1
080033fc W __aeabi_unwind_cpp_pr2
200004d8 B __bss_end
200004d8 B __bss_end__
00000388 A __bss_size
20000150 D __bss_start
08002bac T __cmpsf2
08003e1c T __cxa_atexit
08001e0c T __cxa_guard_abort
08001dd4 T __cxa_guard_acquire
08001e14 T __cxa_guard_release
20000150 D __data_end
00000150 A __data_size
08004898 A __data_source
20000000 D __data_start
08002a64 T __divsf3
080001c4 t __do_global_dtors_aux
080046b0 t __do_global_dtors_aux_fini_array_entry
20000000 D __dso_handle
200004d8 B __end
08002bac T __eqsf2
08004898 R __exidx_end
08004758 R __exidx_start
08000000 A __flash
00010000 A __flash_size
08002880 T __floatdisf
08002854 T __floatsisf
08002870 T __floatundisf
0800284c T __floatunsisf
080046a0 t __frame_dummy_init_array_entry
08002b9c T __gesf2
080030d4 T __gnu_Unwind_Backtrace
08002fd0 T __gnu_Unwind_ForcedUnwind
08002f68 T __gnu_Unwind_RaiseException
080036bc T __gnu_Unwind_Restore_VFP
080036cc T __gnu_Unwind_Restore_VFP_D
080036dc T __gnu_Unwind_Restore_VFP_D_16_to_31
08003774 T __gnu_Unwind_Restore_WMMXC
080036ec T __gnu_Unwind_Restore_WMMXD
08002fe8 T __gnu_Unwind_Resume
08003028 T __gnu_Unwind_Resume_or_Rethrow
080036c4 T __gnu_Unwind_Save_VFP
080036d4 T __gnu_Unwind_Save_VFP_D
080036e4 T __gnu_Unwind_Save_VFP_D_16_to_31
08003788 T __gnu_Unwind_Save_WMMXC
08003730 T __gnu_Unwind_Save_WMMXD
08003888 T __gnu_unwind_execute
08002d28 t __gnu_unwind_get_pr_addr
08003154 t __gnu_unwind_pr_common
08002b9c T __gtsf2
20002400 A __heap_end
200004d8 B __heap_start
080046b0 t __init_array_end
080046a0 t __init_array_start
08000080 V __interrupt_vector
08002ba4 T __lesf2
08003dc8 T __libc_init_array
200002d0 B __lock___libc_recursive_mutex
08002ba4 T __ltsf2
08003b9c T __malloc_free
200002c8 B __malloc_free_list
08003c58 T __malloc_grow_chunk
08003c98 T __malloc_malloc
08003c10 T __malloc_sbrk_aligned
200002c4 B __malloc_sbrk_start
200002c0 B __malloc_sbrk_top
080028fc T __mulsf3
08002bac T __nesf2
08002c88 T __popcountsi2
080046a0 t __preinit_array_end
080046a0 t __preinit_array_start
20000000 A __ram
00002800 A __ram_size
080036a4 T __restore_core_regs
08003e18 T __retarget_lock_acquire_recursive
08003e1a T __retarget_lock_release_recursive
20002800 D __stack
00000400 A __stack_size
080026e8 T __subsf3
00000000 A __tbss_size
08003f14 T __text_end
08000080 D __weak_interrupt_vector
08001448 T __wrap___aeabi_unwind_cpp_pr0
08000326 T __wrap___cxa_allocate_exception
08000342 T __wrap___cxa_begin_catch
0800033c T __wrap___cxa_call_unexpected
08000ac8 T __wrap___cxa_end_catch
08000a08 T __wrap___cxa_end_cleanup
08000aa4 T __wrap___cxa_free_exception
08000a20 T __wrap___cxa_rethrow
08000a60 T __wrap___cxa_throw
08001446 T __wrap___gnu_unwind_pr_common
0800144c T __wrap___gxx_personality_v0
0800144a T __wrap__sig_func
0800144e T __wrap_deregister_tm_clones
08001450 T __wrap_register_tm_clones
08000320 T _exit
08003ec8 T _on_exit
200002d4 b _sig_func
0800014c T _start
080000e0 T abort
08003d30 T aligned_alloc
08003e68 W arm_busfault_isr
08003e6a W arm_debugmon_isr
08003e68 T arm_halt_isr
08003e68 W arm_hardfault_isr
08003e6a T arm_ignore_isr
08003e68 W arm_memmanage_isr
08003e6a W arm_nmi_isr
08003e6a W arm_pendsv_isr
08003e6a W arm_svc_isr
08003e6a W arm_systick_isr
08003e68 W arm_usagefault_isr
2000014c d brk
20000270 B cached_type_info
08003b9c T cfree
20000150 b completed.1
08000184 t deregister_tm_clones
20000288 B end
200002cc B errno
080001ec t frame_dummy
08003b9c T free
08002d50 t get_eit_entry
080014e6 T main
08003c98 T malloc
08003d30 T memalign
08003b70 T memcpy
08003b8c T memset
08003850 t next_unwind_byte
20000154 b object.0
20000354 b on_exits
08003e6c T raise
080001a0 t register_tm_clones
20000278 B resources
080036a4 T restore_core_regs
08002de4 t restore_non_core_regs
08003e28 T sbrk
08002cc4 t search_EIT_table
08002cb0 t selfrel_offset31
20000280 B start
08003b5c T strcmp
08002e4c t unwind_phase2
08002e88 t unwind_phase2_forced
20000114 D value
